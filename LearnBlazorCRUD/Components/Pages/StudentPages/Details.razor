@page "/students/details"
@using Microsoft.EntityFrameworkCore
@using LearnBlazorCRUD.Models
@inject IDbContextFactory<LearnBlazorCRUD.Data.LearnBlazorCRUDContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details Student</h1>

<div>
    <hr />
    @if (student is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@student.Name</dd>
            <dt class="col-sm-2">Age</dt>
            <dd class="col-sm-10">@student.Age</dd>
            <dt class="col-sm-2">BirthDate</dt>
            <dd class="col-sm-10">@student.BirthDate?.ToString("yyyy-MM-dd")</dd>
        </dl>
        <div>
            <a href="@($"/students/edit?id={student.Id}")" class="btn btn-outline-warning btn-sm">Edit</a>
            <a href="@($"/students")" class="btn btn-outline-info btn-sm">Back</a>
        </div>
    }
</div>

@code {
    private Student? student;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        student = await context.Student.FirstOrDefaultAsync(m => m.Id == Id);

        if (student is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
