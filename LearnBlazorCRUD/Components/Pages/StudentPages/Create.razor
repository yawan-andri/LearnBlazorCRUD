@page "/students/create"
@using Microsoft.EntityFrameworkCore
@using LearnBlazorCRUD.Models
@inject IDbContextFactory<LearnBlazorCRUD.Data.LearnBlazorCRUDContext> DbFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Create</PageTitle>

<h1>Create Student</h1>

<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Student" OnValidSubmit="AddStudent" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="   alert"/>
            <div class="mb-3">
                <label for="name" class="form-label">Name</label> 
                <InputText id="name" @bind-Value="Student.Name" class="form-control" /> 
                <ValidationMessage For="() => Student.Name" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="age" class="form-label">Age</label> 
                <InputNumber id="age" @bind-Value="Student.Age" class="form-control" /> 
                <ValidationMessage For="() => Student.Age" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="birthdate" class="form-label">Birth of Date</label> 
                <InputDate id="birthdate" @bind-Value="Student.BirthDate" class="form-control" /> 
                <ValidationMessage For="() => Student.BirthDate" class="text-danger" /> 
            </div>    
            <div>
                <button type="submit" class="btn btn-outline-primary btn-sm">Save</button>
                <a href="/students" class="btn btn-outline-info btn-sm">Cancel</a>
            </div>
        </EditForm>
    </div>
</div>

@* <div>
    <a href="/students">Back to List</a>
</div> *@

@code {
    [SupplyParameterFromForm]
    private Student Student { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddStudent()
    {
        using var context = DbFactory.CreateDbContext();
        context.Student.Add(Student);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/students");
    }
}
